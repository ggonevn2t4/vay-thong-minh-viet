import React from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { 
  Zap, 
  Target, 
  Shield, 
  Brain, 
  CheckCircle, 
  Clock, 
  TrendingUp,
  Users,
  Sparkles,
  ArrowRight
} from 'lucide-react';
import { LoanProductType } from '@/types/loan-application-flow';

interface OptimizationFeaturesProps {
  productType: LoanProductType;
  estimatedTime?: string;
}

const QuestionnaireOptimizationFeatures = ({ productType, estimatedTime }: OptimizationFeaturesProps) => {
  const getProductFeatures = (type: LoanProductType) => {
    switch (type) {
      case 'credit_loan':
        return {
          title: 'Kh·∫£o s√°t Th·∫ª T√≠n D·ª•ng Th√¥ng Minh',
          description: 'ƒê∆∞·ª£c t·ªëi ∆∞u h√≥a ƒë·ªÉ ƒë√°nh gi√° ch√≠nh x√°c kh·∫£ nƒÉng t√≠n d·ª•ng v√† ƒë·ªÅ xu·∫•t th·∫ª ph√π h·ª£p',
          specialFeatures: [
            'Ph√¢n t√≠ch h√†nh vi s·ª≠ d·ª•ng th·∫ª',
            'ƒê√°nh gi√° kh·∫£ nƒÉng chi ti√™u',
            'D·ª± ƒëo√°n m·ª©c h·∫°n m·ª©c ph√π h·ª£p',
            'T·ªëi ∆∞u h√≥a l√£i su·∫•t'
          ],
          icon: 'üí≥',
          color: 'blue'
        };
      case 'mortgage_loan':
        return {
          title: 'Kh·∫£o s√°t Vay Mua Nh√† Chuy√™n S√¢u',
          description: 'ƒê√°nh gi√° to√†n di·ªán kh·∫£ nƒÉng t√†i ch√≠nh v√† t√†i s·∫£n ƒë·ªÉ vay mua b·∫•t ƒë·ªông s·∫£n',
          specialFeatures: [
            'Ph√¢n t√≠ch t·ª∑ l·ªá LTV t·ªëi ∆∞u',
            'ƒê√°nh gi√° kh·∫£ nƒÉng tr·∫£ n·ª£ d√†i h·∫°n',
            'T√≠nh to√°n DTI ratio',
            'D·ª± b√°o bi·∫øn ƒë·ªông l√£i su·∫•t'
          ],
          icon: 'üè†',
          color: 'green'
        };
      case 'car_loan':
        return {
          title: 'Kh·∫£o s√°t Vay Mua Xe Nhanh Ch√≥ng',
          description: 'Quy tr√¨nh t·ªëi ∆∞u ƒë·ªÉ ƒë√°nh gi√° nhanh nhu c·∫ßu vay xe v√† kh·∫£ nƒÉng tr·∫£ n·ª£',
          specialFeatures: [
            'ƒê√°nh gi√° gi√° tr·ªã xe',
            'T√≠nh to√°n m·ª©c vay t·ªëi ƒëa',
            'ƒê·ªÅ xu·∫•t th·ªùi h·∫°n ph√π h·ª£p',
            'So s√°nh l√£i su·∫•t c√°c h√£ng'
          ],
          icon: 'üöó',
          color: 'purple'
        };
      default:
        return {
          title: 'Kh·∫£o s√°t Th√¥ng Minh',
          description: 'ƒê∆∞·ª£c t·ªëi ∆∞u h√≥a cho t·ª´ng lo·∫°i s·∫£n ph·∫©m vay',
          specialFeatures: [
            'Ph√¢n t√≠ch r·ªßi ro th√¥ng minh',
            'ƒê·ªÅ xu·∫•t c√° nh√¢n h√≥a',
            'Quy tr√¨nh t·ªëi ∆∞u',
            'K·∫øt qu·∫£ ch√≠nh x√°c'
          ],
          icon: 'üí∞',
          color: 'gray'
        };
    }
  };

  const features = getProductFeatures(productType);

  const optimizationBenefits = [
    {
      icon: <Zap className="h-5 w-5" />,
      title: 'Nhanh ch√≥ng & Hi·ªáu qu·∫£',
      description: 'Gi·∫£m 50% th·ªùi gian ƒëi·ªÅn form v·ªõi c√¢u h·ªèi th√¥ng minh',
      color: 'text-yellow-600 bg-yellow-100'
    },
    {
      icon: <Target className="h-5 w-5" />,
      title: 'C√¢u h·ªèi c√≥ ƒëi·ªÅu ki·ªán',
      description: 'Ch·ªâ hi·ªÉn th·ªã c√¢u h·ªèi li√™n quan ƒë·∫øn t√¨nh hu·ªëng c·ªßa b·∫°n',
      color: 'text-blue-600 bg-blue-100'
    },
    {
      icon: <Brain className="h-5 w-5" />,
      title: 'AI ph√¢n t√≠ch th√¥ng minh',
      description: 'ƒê√°nh gi√° t·ª± ƒë·ªông ƒëi·ªÉm t√≠n d·ª•ng v√† kh·∫£ nƒÉng vay',
      color: 'text-purple-600 bg-purple-100'
    },
    {
      icon: <Shield className="h-5 w-5" />,
      title: 'B·∫£o m·∫≠t cao',
      description: 'M√£ h√≥a d·ªØ li·ªáu v√† tu√¢n th·ªß chu·∫©n b·∫£o m·∫≠t ng√¢n h√†ng',
      color: 'text-green-600 bg-green-100'
    }
  ];

  const smartFeatures = [
    {
      icon: <TrendingUp className="h-5 w-5 text-blue-600" />,
      title: 'Ph√¢n t√≠ch ƒëi·ªÉm t√≠n d·ª•ng',
      description: '∆Ø·ªõc t√≠nh ƒëi·ªÉm t√≠n d·ª•ng d·ª±a tr√™n th√¥ng tin cung c·∫•p'
    },
    {
      icon: <Users className="h-5 w-5 text-green-600" />,
      title: 'K·∫øt n·ªëi t·ª± ƒë·ªông',
      description: 'K·∫øt n·ªëi v·ªõi t∆∞ v·∫•n vi√™n ph√π h·ª£p nh·∫•t'
    },
    {
      icon: <Sparkles className="h-5 w-5 text-purple-600" />,
      title: 'ƒê·ªÅ xu·∫•t c√° nh√¢n h√≥a',
      description: 'G·ª£i √Ω s·∫£n ph·∫©m d·ª±a tr√™n profile t√†i ch√≠nh'
    }
  ];

  return (
    <div className="space-y-6">
      {/* Main Feature Highlight */}
      <Card className={`border-${features.color}-200 bg-${features.color}-50`}>
        <CardHeader>
          <div className="flex items-center gap-3">
            <div className={`w-12 h-12 bg-${features.color}-600 rounded-lg flex items-center justify-center text-white text-2xl`}>
              {features.icon}
            </div>
            <div>
              <CardTitle className={`text-${features.color}-900`}>{features.title}</CardTitle>
              <p className={`text-${features.color}-700 text-sm`}>{features.description}</p>
            </div>
            {estimatedTime && (
              <Badge className={`bg-${features.color}-600 text-white`}>
                <Clock className="h-3 w-3 mr-1" />
                {estimatedTime}
              </Badge>
            )}
          </div>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-2 gap-3">
            {features.specialFeatures.map((feature, index) => (
              <div key={index} className="flex items-center gap-2">
                <CheckCircle className={`h-4 w-4 text-${features.color}-600`} />
                <span className={`text-sm text-${features.color}-800`}>{feature}</span>
              </div>
            ))}
          </div>
        </CardContent>
      </Card>

      {/* Optimization Benefits */}
      <div>
        <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center gap-2">
          <Sparkles className="h-5 w-5 text-purple-600" />
          T·ªëi ∆∞u h√≥a tr·∫£i nghi·ªám kh·∫£o s√°t
        </h3>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          {optimizationBenefits.map((benefit, index) => (
            <Card key={index} className="border-gray-200 hover:shadow-md transition-shadow">
              <CardContent className="p-4">
                <div className="flex items-start gap-3">
                  <div className={`p-2 rounded-lg ${benefit.color}`}>
                    {benefit.icon}
                  </div>
                  <div>
                    <h4 className="font-medium text-gray-900 mb-1">{benefit.title}</h4>
                    <p className="text-sm text-gray-600">{benefit.description}</p>
                  </div>
                </div>
              </CardContent>
            </Card>
          ))}
        </div>
      </div>

      {/* Smart Features */}
      <div>
        <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center gap-2">
          <Brain className="h-5 w-5 text-purple-600" />
          T√≠nh nƒÉng th√¥ng minh
        </h3>
        <div className="space-y-3">
          {smartFeatures.map((feature, index) => (
            <div key={index} className="flex items-center gap-3 p-3 bg-gray-50 rounded-lg">
              {feature.icon}
              <div>
                <span className="font-medium text-gray-900">{feature.title}</span>
                <span className="text-gray-600 ml-2">- {feature.description}</span>
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* Call to Action */}
      <Card className="border-blue-200 bg-gradient-to-r from-blue-50 to-blue-100">
        <CardContent className="p-6">
          <div className="flex items-center justify-between">
            <div>
              <h4 className="font-semibold text-blue-900 mb-1">S·∫µn s√†ng b·∫Øt ƒë·∫ßu?</h4>
              <p className="text-blue-700 text-sm">
                Ho√†n th√†nh kh·∫£o s√°t th√¥ng minh v√† nh·∫≠n ƒë·ªÅ xu·∫•t c√° nh√¢n h√≥a ngay l·∫≠p t·ª©c
              </p>
            </div>
            <ArrowRight className="h-6 w-6 text-blue-600" />
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

export default QuestionnaireOptimizationFeatures;